适配器模式：将一个类的接口转换成另一种接口，让原本不兼容的类可以兼容。
从用户角度看不到适配者，是解耦的。
------
1、类适配器：
    1.类适配器继承的是src类，因此dst必须要是一个接口，并且增加src类和适配类的耦合度
    2.类适配器中，src中所有的方法都会暴露出来，增加使用成本。
    3.由于继承了src类，可能会根据需求重写src类的方法，增强Adapter的灵活性。

2、对象适配器：
    1.对象适配器不再继承src类，而是持有src类的一个实例。
    即：持有src类的实例对象，实现dst类的接口，完成src->dst的适配。
    2.使用关联关系替换继承关系。

3、接口适配器：
    1.当不需要全部实现接口提供的方法时，可以先设计一个抽象类实现接口，并为接口中的
    每一个方法提供默认实现（空方法），那么该抽象类的子类可以有选择的覆盖父类中的某些方法。
    2.适用于一个接口不想使用其所有的方法的情况。

    * 相当于在接口和具体实现类中添加了一层作为缓冲类，这层对接口中的方法提供默认的实现，
    再由其缓冲类的子类有选择的覆盖部分方法。
